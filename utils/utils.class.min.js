class Utils{static getGroupOfPagination(currentPage,pagePerGroup,limitPage){if(2===(pagePerGroup=pagePerGroup>limitPage?limitPage:pagePerGroup)){if(1===currentPage)return[1,2];if(currentPage===limitPage)return[limitPage-1,limitPage]}if(1===currentPage){const endPage=Math.min(limitPage,currentPage+pagePerGroup-1);return Array.from({length:endPage},((_,i)=>i+1))}if(currentPage===limitPage){const startPage=Math.max(1,currentPage-pagePerGroup+1);return Array.from({length:pagePerGroup},((_,i)=>startPage+i))}const halfGroupSize=Math.floor(pagePerGroup/2);let startPage=currentPage-halfGroupSize,endPage=currentPage+halfGroupSize;if(startPage<1){const adjustment=1-startPage;startPage+=adjustment,endPage+=adjustment}if(endPage>limitPage){const adjustment=endPage-limitPage;endPage-=adjustment,startPage-=adjustment,startPage<1&&(startPage=1)}return Array.from({length:pagePerGroup},((_,i)=>startPage+i))}static addQueryToUrl(key,value){let currentLink=window.location.href,url=new URL(currentLink),queryParams=url.searchParams;return queryParams.has(key)?queryParams.set(key,value):queryParams.append(key,value),url.toString()}static shuffleArray(array){let temporaryValue,randomIndex,currentIndex=array.length;for(;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),currentIndex-=1,temporaryValue=array[currentIndex],array[currentIndex]=array[randomIndex],array[randomIndex]=temporaryValue;return array}static highlight(text,highlightValue){let regexp=new RegExp(highlightValue,"i");return text.toString().replace(regexp,'<span class="highlight">$&</span>')}static removeHighlight(text){return text.toString().replace(/<span class="highlight">([\s\S]*?)<\/span>/gi,"$1")}static convertToTitleCase(str){let formattedStr=str.replace(/([A-Z])/g," $1");return formattedStr=formattedStr.replace(/([a-z])([A-Z])/g,"$1 $2"),formattedStr=formattedStr.replace(/\b\w/g,(match=>match.toUpperCase())),formattedStr}static standardizedTrackArrData(str){return str.split(",").filter((subStr=>subStr)).map((subStr=>subStr.trim()))}static byName=(a,b)=>a.name.toLowerCase().localeCompare(b.name.toLowerCase());static byQuantity=(a,b)=>a.quantity-b.quantity}